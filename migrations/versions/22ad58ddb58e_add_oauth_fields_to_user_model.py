"""Add OAuth fields to User model

Revision ID: 22ad58ddb58e
Revises: 08fc1fe442c2
Create Date: 2025-08-17 22:21:32.419950

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '22ad58ddb58e'
down_revision: Union[str, Sequence[str], None] = '08fc1fe442c2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # SQLite-compatible approach: create new table and copy data
    
    # Create new table with updated schema
    op.create_table('users_new',
        sa.Column('id', sa.Integer(), nullable=False, comment='Unique user identifier'),
        sa.Column('username', sa.String(length=50), nullable=False, comment='Unique username for the user'),
        sa.Column('email', sa.String(length=255), nullable=False, comment='User email address'),
        sa.Column('password', sa.String(length=255), nullable=True, comment='Hashed password (optional for OAuth users)'),
        sa.Column('first_name', sa.String(length=100), nullable=True, comment='User first name'),
        sa.Column('last_name', sa.String(length=100), nullable=True, comment='User last name'),
        sa.Column('bio', sa.Text(), nullable=True, comment='User biography'),
        sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the user account is active'),
        sa.Column('is_verified', sa.Boolean(), nullable=False, comment='Whether the user email is verified'),
        sa.Column('google_id', sa.String(length=100), nullable=True, comment='Google OAuth user ID'),
        sa.Column('picture', sa.String(length=500), nullable=True, comment='User profile picture URL'),
        sa.Column('oauth_provider', sa.String(length=50), nullable=True, comment='OAuth provider (google, etc.)'),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='User creation timestamp'),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False, comment='User last update timestamp'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('google_id'),
        sa.UniqueConstraint('username'),
        comment='Application users table'
    )
    
    # Create indexes
    op.create_index(op.f('ix_users_new_email'), 'users_new', ['email'], unique=False)
    op.create_index(op.f('ix_users_new_google_id'), 'users_new', ['google_id'], unique=True)
    op.create_index(op.f('ix_users_new_username'), 'users_new', ['username'], unique=False)
    
    # Copy data from old table to new table
    op.execute("""
        INSERT INTO users_new (id, username, email, password, first_name, last_name, bio, is_active, is_verified, created_at, updated_at)
        SELECT id, username, email, password, first_name, last_name, bio, is_active, is_verified, created_at, updated_at
        FROM users
    """)
    
    # Drop old table
    op.drop_table('users')
    
    # Rename new table
    op.rename_table('users_new', 'users')


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_google_id'), table_name='users')
    op.alter_column('users', 'password',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('users', 'oauth_provider')
    op.drop_column('users', 'picture')
    op.drop_column('users', 'google_id')
    # ### end Alembic commands ###
